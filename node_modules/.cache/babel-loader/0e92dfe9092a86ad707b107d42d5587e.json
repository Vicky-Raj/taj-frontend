{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Sheet = require('./Sheet');\n\nvar _Sheet2 = _interopRequireDefault(_Sheet);\n\nvar _Row = require('./Row');\n\nvar _Row2 = _interopRequireDefault(_Row);\n\nvar _Cell = require('./Cell');\n\nvar _Cell2 = _interopRequireDefault(_Cell);\n\nvar _DataCell = require('./DataCell');\n\nvar _DataCell2 = _interopRequireDefault(_DataCell);\n\nvar _DataEditor = require('./DataEditor');\n\nvar _DataEditor2 = _interopRequireDefault(_DataEditor);\n\nvar _ValueViewer = require('./ValueViewer');\n\nvar _ValueViewer2 = _interopRequireDefault(_ValueViewer);\n\nvar _keys = require('./keys');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar isEmpty = function isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nvar range = function range(start, end) {\n  var array = [];\n  var inc = end - start > 0;\n\n  for (var i = start; inc ? i <= end : i >= end; inc ? i++ : i--) {\n    inc ? array.push(i) : array.unshift(i);\n  }\n\n  return array;\n};\n\nvar defaultParsePaste = function defaultParsePaste(str) {\n  return str.split(/\\r\\n|\\n|\\r/).map(function (row) {\n    return row.split('\\t');\n  });\n};\n\nvar DataSheet = function (_PureComponent) {\n  _inherits(DataSheet, _PureComponent);\n\n  function DataSheet(props) {\n    _classCallCheck(this, DataSheet);\n\n    var _this = _possibleConstructorReturn(this, (DataSheet.__proto__ || Object.getPrototypeOf(DataSheet)).call(this, props));\n\n    _this.onMouseDown = _this.onMouseDown.bind(_this);\n    _this.onMouseUp = _this.onMouseUp.bind(_this);\n    _this.onMouseOver = _this.onMouseOver.bind(_this);\n    _this.onDoubleClick = _this.onDoubleClick.bind(_this);\n    _this.onContextMenu = _this.onContextMenu.bind(_this);\n    _this.handleNavigate = _this.handleNavigate.bind(_this);\n    _this.handleKey = _this.handleKey.bind(_this).bind(_this);\n    _this.handleCut = _this.handleCut.bind(_this);\n    _this.handleCopy = _this.handleCopy.bind(_this);\n    _this.handlePaste = _this.handlePaste.bind(_this);\n    _this.pageClick = _this.pageClick.bind(_this);\n    _this.onChange = _this.onChange.bind(_this);\n    _this.onRevert = _this.onRevert.bind(_this);\n    _this.isSelected = _this.isSelected.bind(_this);\n    _this.isEditing = _this.isEditing.bind(_this);\n    _this.isClearing = _this.isClearing.bind(_this);\n    _this.handleComponentKey = _this.handleComponentKey.bind(_this);\n    _this.handleKeyboardCellMovement = _this.handleKeyboardCellMovement.bind(_this);\n    _this.defaultState = {\n      start: {},\n      end: {},\n      selecting: false,\n      forceEdit: false,\n      editing: {},\n      clear: {}\n    };\n    _this.state = _this.defaultState;\n    _this.removeAllListeners = _this.removeAllListeners.bind(_this);\n    return _this;\n  }\n\n  _createClass(DataSheet, [{\n    key: 'removeAllListeners',\n    value: function removeAllListeners() {\n      document.removeEventListener('mousedown', this.pageClick);\n      document.removeEventListener('mouseup', this.onMouseUp);\n      document.removeEventListener('cut', this.handleCut);\n      document.removeEventListener('copy', this.handleCopy);\n      document.removeEventListener('paste', this.handlePaste);\n      document.removeEventListener('keydown', this.handlePaste);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // Add listener scoped to the DataSheet that catches otherwise unhandled\n      // keyboard events when displaying components\n      this.dgDom && this.dgDom.addEventListener('keydown', this.handleComponentKey);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.dgDom && this.dgDom.removeEventListener('keydown', this.handleComponentKey);\n      this.removeAllListeners();\n    }\n  }, {\n    key: 'isSelectionControlled',\n    value: function isSelectionControlled() {\n      return 'selected' in this.props;\n    }\n  }, {\n    key: 'getState',\n    value: function getState() {\n      var state = this.state;\n\n      if (this.isSelectionControlled()) {\n        var _ref = this.props.selected || {},\n            start = _ref.start,\n            end = _ref.end;\n\n        start = start || this.defaultState.start;\n        end = end || this.defaultState.end;\n        state = _extends({}, state, {\n          start: start,\n          end: end\n        });\n      }\n\n      return state;\n    }\n  }, {\n    key: '_setState',\n    value: function _setState(state) {\n      if (this.isSelectionControlled() && ('start' in state || 'end' in state)) {\n        var start = state.start,\n            end = state.end,\n            rest = _objectWithoutProperties(state, ['start', 'end']);\n\n        var _props = this.props,\n            selected = _props.selected,\n            onSelect = _props.onSelect;\n        selected = selected || {};\n\n        if (!start) {\n          start = 'start' in selected ? selected.start : this.defaultState.start;\n        }\n\n        if (!end) {\n          end = 'end' in selected ? selected.end : this.defaultState.end;\n        }\n\n        onSelect && onSelect({\n          start: start,\n          end: end\n        });\n        this.setState(rest);\n      } else {\n        this.setState(state);\n      }\n    }\n  }, {\n    key: 'pageClick',\n    value: function pageClick(e) {\n      var element = this.dgDom;\n\n      if (!element.contains(e.target)) {\n        this.setState(this.defaultState);\n        this.removeAllListeners();\n      }\n    }\n  }, {\n    key: 'handleCut',\n    value: function handleCut(e) {\n      if (isEmpty(this.state.editing)) {\n        e.preventDefault();\n        this.handleCopy(e);\n\n        var _getState = this.getState(),\n            start = _getState.start,\n            end = _getState.end;\n\n        this.clearSelectedCells(start, end);\n      }\n    }\n  }, {\n    key: 'handleCopy',\n    value: function handleCopy(e) {\n      if (isEmpty(this.state.editing)) {\n        e.preventDefault();\n        var _props2 = this.props,\n            dataRenderer = _props2.dataRenderer,\n            valueRenderer = _props2.valueRenderer,\n            data = _props2.data;\n\n        var _getState2 = this.getState(),\n            start = _getState2.start,\n            end = _getState2.end;\n\n        var text = range(start.i, end.i).map(function (i) {\n          return range(start.j, end.j).map(function (j) {\n            var cell = data[i][j];\n            var value = dataRenderer ? dataRenderer(cell, i, j) : null;\n\n            if (value === '' || value === null || typeof value === 'undefined') {\n              return valueRenderer(cell, i, j);\n            }\n\n            return value;\n          }).join('\\t');\n        }).join('\\n');\n        e.clipboardData.setData('text/plain', text);\n      }\n    }\n  }, {\n    key: 'handlePaste',\n    value: function handlePaste(e) {\n      if (isEmpty(this.state.editing)) {\n        var _getState3 = this.getState(),\n            start = _getState3.start,\n            end = _getState3.end;\n\n        start = {\n          i: Math.min(start.i, end.i),\n          j: Math.min(start.j, end.j)\n        };\n        end = {\n          i: Math.max(start.i, end.i),\n          j: Math.max(start.j, end.j)\n        };\n        var parse = this.props.parsePaste || defaultParsePaste;\n        var changes = [];\n        var pasteData = [];\n\n        if (window.clipboardData && window.clipboardData.getData) {\n          // IE\n          pasteData = parse(window.clipboardData.getData('Text'));\n        } else if (e.clipboardData && e.clipboardData.getData) {\n          pasteData = parse(e.clipboardData.getData('text/plain'));\n        } // in order of preference\n\n\n        var _props3 = this.props,\n            data = _props3.data,\n            onCellsChanged = _props3.onCellsChanged,\n            onPaste = _props3.onPaste,\n            onChange = _props3.onChange;\n\n        if (onCellsChanged) {\n          var additions = [];\n          pasteData.forEach(function (row, i) {\n            row.forEach(function (value, j) {\n              end = {\n                i: start.i + i,\n                j: start.j + j\n              };\n              var cell = data[end.i] && data[end.i][end.j];\n\n              if (!cell) {\n                additions.push({\n                  row: end.i,\n                  col: end.j,\n                  value: value\n                });\n              } else if (!cell.readOnly) {\n                changes.push({\n                  cell: cell,\n                  row: end.i,\n                  col: end.j,\n                  value: value\n                });\n              }\n            });\n          });\n\n          if (additions.length) {\n            onCellsChanged(changes, additions);\n          } else {\n            onCellsChanged(changes);\n          }\n        } else if (onPaste) {\n          pasteData.forEach(function (row, i) {\n            var rowData = [];\n            row.forEach(function (pastedData, j) {\n              end = {\n                i: start.i + i,\n                j: start.j + j\n              };\n              var cell = data[end.i] && data[end.i][end.j];\n              rowData.push({\n                cell: cell,\n                data: pastedData\n              });\n            });\n            changes.push(rowData);\n          });\n          onPaste(changes);\n        } else if (onChange) {\n          pasteData.forEach(function (row, i) {\n            row.forEach(function (value, j) {\n              end = {\n                i: start.i + i,\n                j: start.j + j\n              };\n              var cell = data[end.i] && data[end.i][end.j];\n\n              if (cell && !cell.readOnly) {\n                onChange(cell, end.i, end.j, value);\n              }\n            });\n          });\n        }\n\n        this._setState({\n          end: end\n        });\n      }\n    }\n  }, {\n    key: 'handleKeyboardCellMovement',\n    value: function handleKeyboardCellMovement(e) {\n      var commit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _getState4 = this.getState(),\n          start = _getState4.start,\n          editing = _getState4.editing;\n\n      var data = this.props.data;\n      var isEditing = editing && !isEmpty(editing);\n      var currentCell = data[start.i] && data[start.i][start.j];\n\n      if (isEditing && !commit) {\n        return false;\n      }\n\n      var hasComponent = currentCell && currentCell.component;\n      var keyCode = e.which || e.keyCode;\n\n      if (hasComponent && isEditing) {\n        e.preventDefault();\n        return;\n      }\n\n      if (keyCode === _keys.TAB_KEY) {\n        this.handleNavigate(e, {\n          i: 0,\n          j: e.shiftKey ? -1 : 1\n        }, true);\n      } else if (keyCode === _keys.RIGHT_KEY) {\n        this.handleNavigate(e, {\n          i: 0,\n          j: 1\n        });\n      } else if (keyCode === _keys.LEFT_KEY) {\n        this.handleNavigate(e, {\n          i: 0,\n          j: -1\n        });\n      } else if (keyCode === _keys.UP_KEY) {\n        this.handleNavigate(e, {\n          i: -1,\n          j: 0\n        });\n      } else if (keyCode === _keys.DOWN_KEY) {\n        this.handleNavigate(e, {\n          i: 1,\n          j: 0\n        });\n      } else if (commit && keyCode === _keys.ENTER_KEY) {\n        this.handleNavigate(e, {\n          i: e.shiftKey ? -1 : 1,\n          j: 0\n        });\n      }\n    }\n  }, {\n    key: 'handleKey',\n    value: function handleKey(e) {\n      if (e.isPropagationStopped && e.isPropagationStopped()) {\n        return;\n      }\n\n      var keyCode = e.which || e.keyCode;\n\n      var _getState5 = this.getState(),\n          start = _getState5.start,\n          end = _getState5.end,\n          editing = _getState5.editing;\n\n      var isEditing = editing && !isEmpty(editing);\n      var noCellsSelected = !start || isEmpty(start);\n      var ctrlKeyPressed = e.ctrlKey || e.metaKey;\n      var deleteKeysPressed = keyCode === _keys.DELETE_KEY || keyCode === _keys.BACKSPACE_KEY;\n      var enterKeyPressed = keyCode === _keys.ENTER_KEY;\n      var numbersPressed = keyCode >= 48 && keyCode <= 57;\n      var lettersPressed = keyCode >= 65 && keyCode <= 90;\n      var latin1Supplement = keyCode >= 160 && keyCode <= 255;\n      var numPadKeysPressed = keyCode >= 96 && keyCode <= 105;\n      var currentCell = !noCellsSelected && this.props.data[start.i][start.j];\n      var equationKeysPressed = [187,\n      /* equal */\n      189,\n      /* substract */\n      190,\n      /* period */\n      107,\n      /* add */\n      109,\n      /* decimal point */\n      110].indexOf(keyCode) > -1;\n\n      if (noCellsSelected || ctrlKeyPressed) {\n        return true;\n      }\n\n      if (!isEditing) {\n        this.handleKeyboardCellMovement(e);\n\n        if (deleteKeysPressed) {\n          e.preventDefault();\n          this.clearSelectedCells(start, end);\n        } else if (currentCell && !currentCell.readOnly) {\n          if (enterKeyPressed) {\n            this._setState({\n              editing: start,\n              clear: {},\n              forceEdit: true\n            });\n\n            e.preventDefault();\n          } else if (numbersPressed || numPadKeysPressed || lettersPressed || latin1Supplement || equationKeysPressed) {\n            // empty out cell if user starts typing without pressing enter\n            this._setState({\n              editing: start,\n              clear: start,\n              forceEdit: false\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: 'getSelectedCells',\n    value: function getSelectedCells(data, start, end) {\n      var selected = [];\n      range(start.i, end.i).map(function (row) {\n        range(start.j, end.j).map(function (col) {\n          if (data[row] && data[row][col]) {\n            selected.push({\n              cell: data[row][col],\n              row: row,\n              col: col\n            });\n          }\n        });\n      });\n      return selected;\n    }\n  }, {\n    key: 'clearSelectedCells',\n    value: function clearSelectedCells(start, end) {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          data = _props4.data,\n          onCellsChanged = _props4.onCellsChanged,\n          onChange = _props4.onChange;\n      var cells = this.getSelectedCells(data, start, end).filter(function (cell) {\n        return !cell.cell.readOnly;\n      }).map(function (cell) {\n        return _extends({}, cell, {\n          value: ''\n        });\n      });\n\n      if (onCellsChanged) {\n        onCellsChanged(cells);\n        this.onRevert();\n      } else if (onChange) {\n        // ugly solution brought to you by https://reactjs.org/docs/react-component.html#setstate\n        // setState in a loop is unreliable\n        setTimeout(function () {\n          cells.forEach(function (_ref2) {\n            var cell = _ref2.cell,\n                row = _ref2.row,\n                col = _ref2.col,\n                value = _ref2.value;\n            onChange(cell, row, col, value);\n          });\n\n          _this2.onRevert();\n        }, 0);\n      }\n    }\n  }, {\n    key: 'handleNavigate',\n    value: function handleNavigate(e, offsets, jumpRow) {\n      var _this3 = this;\n\n      if (offsets && (offsets.i || offsets.j)) {\n        var _getState6 = this.getState(),\n            start = _getState6.start,\n            end = _getState6.end;\n\n        var data = this.props.data;\n        var oldStartLocation = {\n          i: start.i,\n          j: start.j\n        };\n        var newEndLocation = {\n          i: end.i + offsets.i,\n          j: end.j + offsets.j\n        };\n        var newLocation = {\n          i: start.i + offsets.i,\n          j: start.j + offsets.j\n        };\n\n        var updateLocation = function updateLocation() {\n          if (data[newLocation.i] && typeof data[newLocation.i][newLocation.j] !== 'undefined') {\n            _this3._setState({\n              start: e.shiftKey && !jumpRow ? oldStartLocation : newLocation,\n              end: e.shiftKey && !jumpRow ? newEndLocation : newLocation,\n              editing: {}\n            });\n\n            e.preventDefault();\n            return true;\n          }\n\n          return false;\n        };\n\n        if (!updateLocation() && jumpRow) {\n          if (offsets.j < 0) {\n            newLocation = {\n              i: start.i - 1,\n              j: data[0].length - 1\n            };\n          } else {\n            newLocation = {\n              i: start.i + 1,\n              j: 0\n            };\n          }\n\n          updateLocation();\n        }\n      }\n    }\n  }, {\n    key: 'handleComponentKey',\n    value: function handleComponentKey(e) {\n      var _this4 = this; // handles keyboard events when editing components\n\n\n      var keyCode = e.which || e.keyCode;\n\n      if (![_keys.ENTER_KEY, _keys.ESCAPE_KEY, _keys.TAB_KEY].includes(keyCode)) {\n        return;\n      }\n\n      var editing = this.state.editing;\n      var data = this.props.data;\n      var isEditing = !isEmpty(editing);\n\n      if (isEditing) {\n        var currentCell = data[editing.i][editing.j];\n        var offset = e.shiftKey ? -1 : 1;\n\n        if (currentCell && currentCell.component && !currentCell.forceComponent) {\n          e.preventDefault();\n          var func = this.onRevert; // ESCAPE_KEY\n\n          if (keyCode === _keys.ENTER_KEY) {\n            func = function func() {\n              return _this4.handleNavigate(e, {\n                i: offset,\n                j: 0\n              });\n            };\n          } else if (keyCode === _keys.TAB_KEY) {\n            func = function func() {\n              return _this4.handleNavigate(e, {\n                i: 0,\n                j: offset\n              }, true);\n            };\n          } // setTimeout makes sure that component is done handling the event before we take over\n\n\n          setTimeout(function () {\n            func();\n            _this4.dgDom && _this4.dgDom.focus();\n          }, 1);\n        }\n      }\n    }\n  }, {\n    key: 'onContextMenu',\n    value: function onContextMenu(evt, i, j) {\n      var cell = this.props.data[i][j];\n\n      if (this.props.onContextMenu) {\n        this.props.onContextMenu(evt, cell, i, j);\n      }\n    }\n  }, {\n    key: 'onDoubleClick',\n    value: function onDoubleClick(i, j) {\n      var cell = this.props.data[i][j];\n\n      if (!cell.readOnly) {\n        this._setState({\n          editing: {\n            i: i,\n            j: j\n          },\n          forceEdit: true,\n          clear: {}\n        });\n      }\n    }\n  }, {\n    key: 'onMouseDown',\n    value: function onMouseDown(i, j, e) {\n      var _this5 = this;\n\n      var isNowEditingSameCell = !isEmpty(this.state.editing) && this.state.editing.i === i && this.state.editing.j === j;\n      var editing = isEmpty(this.state.editing) || this.state.editing.i !== i || this.state.editing.j !== j ? {} : this.state.editing;\n\n      this._setState({\n        selecting: !isNowEditingSameCell,\n        start: e.shiftKey ? this.state.start : {\n          i: i,\n          j: j\n        },\n        end: {\n          i: i,\n          j: j\n        },\n        editing: editing,\n        forceEdit: !!isNowEditingSameCell\n      });\n\n      var ua = window.navigator.userAgent;\n      var isIE = /MSIE|Trident/.test(ua); // Listen for Ctrl + V in case of IE\n\n      if (isIE) {\n        document.addEventListener('keydown', function (e) {\n          if ((e.keyCode === 86 || e.which === 86) && e.ctrlKey) {\n            _this5.handlePaste(e);\n          }\n        });\n      } // Keep listening to mouse if user releases the mouse (dragging outside)\n\n\n      document.addEventListener('mouseup', this.onMouseUp); // Listen for any outside mouse clicks\n\n      document.addEventListener('mousedown', this.pageClick); // Cut, copy and paste event handlers\n\n      document.addEventListener('cut', this.handleCut);\n      document.addEventListener('copy', this.handleCopy);\n      document.addEventListener('paste', this.handlePaste);\n    }\n  }, {\n    key: 'onMouseOver',\n    value: function onMouseOver(i, j) {\n      if (this.state.selecting && isEmpty(this.state.editing)) {\n        this._setState({\n          end: {\n            i: i,\n            j: j\n          }\n        });\n      }\n    }\n  }, {\n    key: 'onMouseUp',\n    value: function onMouseUp() {\n      this._setState({\n        selecting: false\n      });\n\n      document.removeEventListener('mouseup', this.onMouseUp);\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(row, col, value) {\n      var _props5 = this.props,\n          onChange = _props5.onChange,\n          onCellsChanged = _props5.onCellsChanged,\n          data = _props5.data;\n\n      if (onCellsChanged) {\n        onCellsChanged([{\n          cell: data[row][col],\n          row: row,\n          col: col,\n          value: value\n        }]);\n      } else if (onChange) {\n        onChange(data[row][col], row, col, value);\n      }\n\n      this.onRevert();\n    }\n  }, {\n    key: 'onRevert',\n    value: function onRevert() {\n      this._setState({\n        editing: {}\n      });\n\n      this.dgDom && this.dgDom.focus();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _state = this.state,\n          start = _state.start,\n          end = _state.end;\n      var prevEnd = prevState.end;\n\n      if (!isEmpty(end) && !(end.i === prevEnd.i && end.j === prevEnd.j) && !this.isSelectionControlled()) {\n        this.props.onSelect && this.props.onSelect({\n          start: start,\n          end: end\n        });\n      }\n    }\n  }, {\n    key: 'isSelected',\n    value: function isSelected(i, j) {\n      var _getState7 = this.getState(),\n          start = _getState7.start,\n          end = _getState7.end;\n\n      var posX = j >= start.j && j <= end.j;\n      var negX = j <= start.j && j >= end.j;\n      var posY = i >= start.i && i <= end.i;\n      var negY = i <= start.i && i >= end.i;\n      return posX && posY || negX && posY || negX && negY || posX && negY;\n    }\n  }, {\n    key: 'isEditing',\n    value: function isEditing(i, j) {\n      return this.state.editing.i === i && this.state.editing.j === j;\n    }\n  }, {\n    key: 'isClearing',\n    value: function isClearing(i, j) {\n      return this.state.clear.i === i && this.state.clear.j === j;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this6 = this;\n\n      var _props6 = this.props,\n          SheetRenderer = _props6.sheetRenderer,\n          RowRenderer = _props6.rowRenderer,\n          cellRenderer = _props6.cellRenderer,\n          dataRenderer = _props6.dataRenderer,\n          valueRenderer = _props6.valueRenderer,\n          dataEditor = _props6.dataEditor,\n          valueViewer = _props6.valueViewer,\n          attributesRenderer = _props6.attributesRenderer,\n          className = _props6.className,\n          overflow = _props6.overflow,\n          data = _props6.data,\n          keyFn = _props6.keyFn;\n      var forceEdit = this.state.forceEdit;\n      return _react2.default.createElement('span', {\n        ref: function ref(r) {\n          _this6.dgDom = r;\n        },\n        tabIndex: '0',\n        className: 'data-grid-container',\n        onKeyDown: this.handleKey\n      }, _react2.default.createElement(SheetRenderer, {\n        data: data,\n        className: ['data-grid', className, overflow].filter(function (a) {\n          return a;\n        }).join(' ')\n      }, data.map(function (row, i) {\n        return _react2.default.createElement(RowRenderer, {\n          key: keyFn ? keyFn(i) : i,\n          row: i,\n          cells: row\n        }, row.map(function (cell, j) {\n          return _react2.default.createElement(_DataCell2.default, {\n            key: cell.key ? cell.key : i + '-' + j,\n            row: i,\n            col: j,\n            cell: cell,\n            forceEdit: forceEdit,\n            onMouseDown: _this6.onMouseDown,\n            onMouseOver: _this6.onMouseOver,\n            onDoubleClick: _this6.onDoubleClick,\n            onContextMenu: _this6.onContextMenu,\n            onChange: _this6.onChange,\n            onRevert: _this6.onRevert,\n            onNavigate: _this6.handleKeyboardCellMovement,\n            onKey: _this6.handleKey,\n            selected: _this6.isSelected(i, j),\n            editing: _this6.isEditing(i, j),\n            clearing: _this6.isClearing(i, j),\n            attributesRenderer: attributesRenderer,\n            cellRenderer: cellRenderer,\n            valueRenderer: valueRenderer,\n            dataRenderer: dataRenderer,\n            valueViewer: valueViewer,\n            dataEditor: dataEditor\n          });\n        }));\n      })));\n    }\n  }]);\n\n  return DataSheet;\n}(_react.PureComponent);\n\nexports.default = DataSheet;\nDataSheet.propTypes = {\n  data: _propTypes2.default.array.isRequired,\n  className: _propTypes2.default.string,\n  overflow: _propTypes2.default.oneOf(['wrap', 'nowrap', 'clip']),\n  onChange: _propTypes2.default.func,\n  onCellsChanged: _propTypes2.default.func,\n  onContextMenu: _propTypes2.default.func,\n  onSelect: _propTypes2.default.func,\n  selected: _propTypes2.default.shape({\n    start: _propTypes2.default.shape({\n      i: _propTypes2.default.number,\n      j: _propTypes2.default.number\n    }),\n    end: _propTypes2.default.shape({\n      i: _propTypes2.default.number,\n      j: _propTypes2.default.number\n    })\n  }),\n  valueRenderer: _propTypes2.default.func.isRequired,\n  dataRenderer: _propTypes2.default.func,\n  sheetRenderer: _propTypes2.default.func.isRequired,\n  rowRenderer: _propTypes2.default.func.isRequired,\n  cellRenderer: _propTypes2.default.func.isRequired,\n  valueViewer: _propTypes2.default.func,\n  dataEditor: _propTypes2.default.func,\n  parsePaste: _propTypes2.default.func,\n  attributesRenderer: _propTypes2.default.func,\n  keyFn: _propTypes2.default.func\n};\nDataSheet.defaultProps = {\n  sheetRenderer: _Sheet2.default,\n  rowRenderer: _Row2.default,\n  cellRenderer: _Cell2.default,\n  valueViewer: _ValueViewer2.default,\n  dataEditor: _DataEditor2.default\n};","map":null,"metadata":{},"sourceType":"script"}